import psutil

class TOP10Process:
    def __init__(self, file_path):
        self.file_folderName = file_path + "/"
        pass

    def getListOfProcess(self):
        listOfProc = []
        # Iterate over the list
        
        for proc in psutil.process_iter():
            try:
                # Fetch process details as dict
                pinfo = proc.as_dict(attrs=['pid', 'name', 'username'])
                pinfo['vms'] = proc.memory_info().vms / (1024*1024)
                # Append dict to list
                listOfProc.append(pinfo)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        # Sort list of dict by key vms i.e. memory usage
        listOfProc = sorted(listOfProc, key=lambda procObj: procObj['vms'], reverse=True)
 
        return listOfProc
 
    def top10_processes(self):
        result = dict()
 
        print('*** Top 10 process with highest memory usage ***')
 
        listOfRunningProcess = self.getListOfProcess()

        top10_process=[]

        for elem in listOfRunningProcess[:10] :
            top10_process.append(elem)
        
        result["top10"]= top10_process

        return result